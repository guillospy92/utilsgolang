// Code generated by mockery v2.9.4. DO NOT EDIT.

package mconnectdocument

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// DocumentDBAPI is an autogenerated mock type for the DocumentDBAPI type
type DocumentDBApiMock struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, nameCollection, filter
func (_m *DocumentDBApiMock) Find(ctx context.Context, nameCollection string, filter interface{}) (*mongo.Cursor, error) {
	ret := _m.Called(ctx, nameCollection, filter)

	var r0 *mongo.Cursor
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *mongo.Cursor); ok {
		r0 = rf(ctx, nameCollection, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Cursor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, nameCollection, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: ctx, nameCollection, filter
func (_m *DocumentDBApiMock) FindOne(ctx context.Context, nameCollection string, filter interface{}) *mongo.SingleResult {
	ret := _m.Called(ctx, nameCollection, filter)

	var r0 *mongo.SingleResult
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *mongo.SingleResult); ok {
		r0 = rf(ctx, nameCollection, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.SingleResult)
		}
	}

	return r0
}

// GetContext provides a mock function with given fields:
func (_m *DocumentDBApiMock) GetContext() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// InsertOne provides a mock function with given fields: ctx, nameCollection, document
func (_m *DocumentDBApiMock) InsertOne(
	ctx context.Context,
	nameCollection string,
	document interface{},
) (*mongo.InsertOneResult, error) {
	ret := _m.Called(ctx, nameCollection, document)

	var r0 *mongo.InsertOneResult
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *mongo.InsertOneResult); ok {
		r0 = rf(ctx, nameCollection, document)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.InsertOneResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, nameCollection, document)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOne provides a mock function with given fields: ctx, nameCollection, filter, update
func (_m *DocumentDBApiMock) UpdateOne(
	ctx context.Context,
	nameCollection string,
	filter interface{},
	update interface{},
) (*mongo.UpdateResult, error) {
	ret := _m.Called(ctx, nameCollection, filter, update)

	var r0 *mongo.UpdateResult
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}) *mongo.UpdateResult); ok {
		r0 = rf(ctx, nameCollection, filter, update)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, interface{}) error); ok {
		r1 = rf(ctx, nameCollection, filter, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
